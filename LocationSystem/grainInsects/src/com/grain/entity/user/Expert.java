package com.grain.entity.user;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.grain.entity.TConsultation;
import com.grain.entity.TExpertOpinion;
import com.grain.entity.TaskDistribution;

/**
 * TExpert generated by hbm2java
 * 专家用户
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "t_expert")
@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler",
		"consultationList","opinionList","taskDistributions"
		})
public class Expert implements java.io.Serializable {

	private String username;
	private String password;
	private String name;
	private String title;
	private String company;
	private String mobile;
	private Long point;
	private String contact;
	private String specialty;
	private Boolean hasaudit;
	private String modifer;
	private Date modifydate;
	private List<TConsultation> consultationList = new ArrayList<TConsultation>();
	private List<TExpertOpinion> opinionList = new ArrayList<TExpertOpinion>();
	private List<TaskDistribution> taskDistributions = new ArrayList<TaskDistribution>();
	
	/** 角色 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="roleid", nullable = true)
	//@JsonUnwrapped
	@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler",
			"isSystem",	"resourceIds","description","createDate","modifyDate"})
	private Role role; 


	@Id
	@Column(name = "username", unique = true, nullable = false, length = 10)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", length = 255)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "name", length = 60)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "title", length = 40)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "company", length = 100)
	public String getCompany() {
		return this.company;
	}

	public void setCompany(String company) {
		this.company = company;
	}

	@Column(name = "mobile", length = 20)
	public String getMobile() {
		return this.mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	@Column(name = "point", nullable = false)
	public Long getPoint() {
		return this.point;
	}

	public void setPoint(Long point) {
		this.point = point;
	}

	@Column(name = "contact", length = 20)
	public String getContact() {
		return this.contact;
	}

	public void setContact(String contact) {
		this.contact = contact;
	}

	@Column(name = "Specialty", length = 200)
	public String getSpecialty() {
		return this.specialty;
	}

	public void setSpecialty(String specialty) {
		this.specialty = specialty;
	}

	@Column(name = "hasaudit")
	public Boolean getHasaudit() {
		return this.hasaudit;
	}

	public void setHasaudit(Boolean hasaudit) {
		this.hasaudit = hasaudit;
	}

	@Column(name = "modifer", length = 30)
	public String getModifer() {
		return this.modifer;
	}

	public void setModifer(String modifer) {
		this.modifer = modifer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modifydate", length = 19)
	public Date getModifydate() {
		return this.modifydate;
	}

	public void setModifydate(Date modifydate) {
		this.modifydate = modifydate;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expert",cascade=CascadeType.ALL, orphanRemoval=true)
	public List<TConsultation> getConsultationList() {
		return consultationList;
	}

	
	public void setConsultationList(List<TConsultation> consultationList) {
		this.consultationList = consultationList;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expert")
	public List<TExpertOpinion> getOpinionList() {
		return opinionList;
	}

	public void setOpinionList(List<TExpertOpinion> opinionList) {
		this.opinionList = opinionList;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expert",cascade=CascadeType.ALL, orphanRemoval=true)
	public List<TaskDistribution> getTaskDistributions() {
		return taskDistributions;
	}

	public void setTaskDistributions(List<TaskDistribution> taskDistributions) {
		this.taskDistributions = taskDistributions;
	}
	
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "Expert",cascade=CascadeType.ALL, orphanRemoval=true)
//	public List<TConsultation> getTConsultations() {
//		return this.consultationList;
//	}
//
//	public void setTConsultations(List<TConsultation> consultationList) {
//		this.consultationList = consultationList;
//	}
	
	

}
